using System;
using System.Net.Http;
using SAHB.GraphQLClient.Batching;
using SAHB.GraphQLClient.Builder;
using SAHB.GraphQLClient.Exceptions;
using SAHB.GraphQLClient.QueryGenerator;

namespace SAHB.GraphQLClient
{
    // ReSharper disable once InconsistentNaming
    /// <summary>
    /// GraphQL client which supports generating GraphQL queries and mutations from C# types
    /// </summary>
    public interface IGraphQLClient
    {
        /// <summary>
        /// Generates a query to a GraphQL server using a query generated by the <see cref="IGraphQLBuilder"/>
        /// </summary>
        /// <param name="builder">The builder used to generate the query</param>
        /// <param name="arguments">The arguments used in the query which is inserted in the variables</param>
        /// <returns>The query generated ready to be executed</returns>
        /// <exception cref="GraphQLErrorException">Thrown when validation or GraphQL endpoint returns an error</exception>
        IGraphQLQuery CreateQuery(Action<IGraphQLBuilder> builder, params GraphQLQueryArgument[] arguments);

        /// <summary>
        /// Generates a query to a GraphQL server using a specified type <typeparamref name="T"/>
        /// </summary>
        /// <typeparam name="T">The type to generate the query from</typeparam>
        /// <param name="arguments">The arguments used in the query which is inserted in the variables</param>
        /// <returns>The query generated ready to be executed</returns>
        /// <exception cref="GraphQLErrorException">Thrown when validation or GraphQL endpoint returns an error</exception>
        IGraphQLQuery<T> CreateQuery<T>(params GraphQLQueryArgument[] arguments) where T : class;

        /// <summary>
        /// Generates a mutation to a GraphQL server using a query generated by the <see cref="IGraphQLBuilder"/>
        /// </summary>
        /// <param name="builder">The builder used to generate the query</param>
        /// <param name="arguments">The arguments used in the query which is inserted in the variables</param>
        /// <returns>The query generated ready to be executed</returns>
        /// <exception cref="GraphQLErrorException">Thrown when validation or GraphQL endpoint returns an error</exception>
        IGraphQLQuery CreateMutation(Action<IGraphQLBuilder> builder, params GraphQLQueryArgument[] arguments);

        /// <summary>
        /// Generates a mutation to a GraphQL server using a specified type <typeparamref name="T"/>
        /// </summary>
        /// <typeparam name="T">The type to generate the mutation from</typeparam>
        /// <param name="arguments">The arguments used in the query which is inserted in the variables</param>
        /// <returns>The query generated ready to be executed</returns>
        /// <exception cref="GraphQLErrorException">Thrown when validation or GraphQL endpoint returns an error</exception>
        IGraphQLQuery<T> CreateMutation<T>(params GraphQLQueryArgument[] arguments) where T : class;

        /// <summary>
        /// Generates a GraphQL batch
        /// Default HttpMethod is POST
        /// </summary>
        /// <returns>The IGraphQLBatch object</returns>
        IGraphQLBatch CreateBatch();
    }
}